// integrated footsteps system, code is my own, but I'm still going to
// thank TZK for the original idea that inspired my own take on it
Class JohnDoe : DoomPlayer
{
	mkDarklight dl;
	bool wasinair;
	double feetbloodlv;
	Color feetbloodcol;
	int footnum;

	Default
	{
		Radius 12;
		Height 45;
		Scale 0.75;
		Player.ViewHeight 36;
		Player.DisplayName "John Doe";
		Player.ForwardMove 0.3, 0.4;
		Player.ViewBob 0.2;
		Player.SideMove 0.3, 0.4;
		Player.StartItem "DummyKey";
		Player.UseRange 40;
		Player.DamageScreenColor "A0 00 FF", 1.0, "DarkFire";
		Player.SoundClass "johndoe";
		BloodType "mkBlood";
	}
	void PlayFootstep( Actor onactor )
	{
		static const string footsteps[] =
		{
			"tex_0001", "step/carpet",
			"tex_0002", "step/metal",
			"tex_0004", "step/metal",
			"tex_0008", "step/wood",
			"tex_0029", "step/wood",
			"tex_0037", "step/dirt",
			"tex_0038", "step/metal",
			"tex_0039", "step/metal",
			"tex_0041", "step/wood",
			"tex_0043", "step/wood",
			"tex_0050", "step/metal",
			"tex_0055", "step/metal",
			"tex_0056", "step/grate",
			"tex_0057", "step/grate",
			"tex_0058", "step/metal",
			"tex_0059", "step/metal",
			"tex_0060", "step/grate",
			"tex_0061", "step/metal",
			"tex_0062", "step/metal",
			"tex_0063", "step/metal",
			"tex_0064", "step/metal",
			"tex_0065", "step/metal",
			"tex_0067", "step/wood",
			"tex_0068", "step/metal",
			"tex_0070", "step/metal",
			"tex_0071", "step/metal",
			"tex_0081", "step/grate",
			"tex_0083", "step/metal",
			"tex_0088", "step/wood",
			"tex_0089", "step/glass",
			"tex_0092", "step/wood",
			"tex_0096", "step/metal",
			"tex_0101", "step/metal",
			"tex_0102", "step/metal",
			"tex_0106", "step/metal",
			"tex_0107", "step/metal",
			"tex_0108", "step/metal",
			"tex_0109", "step/metal",
			"tex_0110", "step/metal",
			"tex_0111", "step/metal",
			"tex_0112", "step/metal",
			"tex_0113", "step/metal",
			"tex_0114", "step/metal",
			"tex_0124", "step/grass",
			"tex_0140", "step/metal",
			"tex_0163", "step/blood",
			"tex_0164", "step/wet"
		};
		// check if we're swimming
		if ( waterlevel > 2 ) return;
		double stepvol = clamp(vel.xy.length()/2.0,0.2,1.0);
		A_AlertMonsters(40*stepvol);
		// check if we're wading through water
		if ( waterlevel > 0 )
		{
			A_PlaySound("step/wet",CHAN_7,stepvol);
			return;
		}
		// check if we're stepping on blood
		ThinkerIterator t = ThinkerIterator.Create("Actor");
		Actor a;
		Vector3 dist;
		while ( a = Actor(t.Next()) )
		{
			if ( !(a is "mkBloodPool") && !(a is "mkBloodDrop") ) continue;
			dist = Vec3To(a);
			if ( (abs(dist.x) > a.radius) || (abs(dist.y) > a.radius) || (abs(dist.z) > a.height) ) continue;
			feetbloodlv = min(feetbloodlv+a.alpha*0.4,2.5);
			if ( a is "mkBloodPool" ) feetbloodcol = mkBloodPool(a).stepcolor;
			else if ( a is "mkBloodDrop" ) feetbloodcol = mkBloodDrop(a).stepcolor;
			A_PlaySound("step/blood",CHAN_7,stepvol);
			return;
		}
		if ( onactor )
		{
			A_PlaySound("step/base",CHAN_7,stepvol);
			return;
		}
		if ( feetbloodlv > 0 )
		{
			Vector3 y = (sin(angle),-cos(angle),0);
			let f = Spawn("mkFootprint",pos+y*4.0*footnum);
			f.angle = angle;
			// darken the shade
			f.SetShade(Color(feetbloodcol.r/4,feetbloodcol.g/4,feetbloodcol.b/4));
			f.alpha *= min(feetbloodlv,1.0);
			f.frame = 0;
			if ( footnum == 1 ) footnum = -1;
			else footnum = 1;
			feetbloodlv = max(feetbloodlv-0.15,0);
		}
		for ( int i=0; i<footsteps.size(); i+=2 )
		{
			if ( TexMan.GetName(floorpic) ~== footsteps[i] )
			{
				A_PlaySound(footsteps[i+1],CHAN_7,stepvol);
				return;
			}
		}
		A_PlaySound("step/base",CHAN_7,stepvol);
	}
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		dl = mkDarklight(Spawn("mkDarklight"));
		dl.target = self;
		wasinair = false;
		footnum = 1;
	}
	override void Tick()
	{
		double ang;
		bool dummy;
		Actor onactor;
		Super.Tick();
		[dummy, onactor] = TestMobjZ(true);
		if ( abs((pos.z+floorclip)-floorz <= 16) || onactor )
		{
			if ( wasinair )
			{
				wasinair = false;
				PlayFootstep(onactor);
			}
		}
		else wasinair = true;
		if ( (player.cmd.forwardmove || player.cmd.sidemove) )
		{
			ang = level.time/(20*TICRATE/35.0)*360.0;
			if ( sin(ang) < 1.0 ) return;
			if ( abs((pos.z+floorclip)-floorz <= 16) || onactor )
				PlayFootstep(onactor);
		}
	}
}

// eye adaptation dark light a la penumbra/amnesia
Class mkDarklight : DynamicLight
{
	float charge;

	Default
	{
		DynamicLight.Type "Point";
		+DynamicLight.ATTENUATE;
	}
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		args[LIGHT_RED] = 0;
		args[LIGHT_GREEN] = 0;
		args[LIGHT_BLUE] = 0;
		args[LIGHT_INTENSITY] = 100;
		charge = 0.0;
	}
	override void Tick()
	{
		Super.Tick();
		if ( !target )
		{
			Destroy();
			return;
		}
		SetOrigin(target.vec2OffsetZ(0,0,target.player.viewz),true);
		args[LIGHT_RED] = int(24*charge);
		args[LIGHT_GREEN] = int(24*charge);
		args[LIGHT_BLUE] = int(32*charge);
		bDORMANT = (target.player != players[consoleplayer]);
		mkFlashlight fl = mkFlashlight(target.FindInventory("mkFlashlight"));
		if ( fl && fl.bActive )
		{
			charge -= 0.15;
			if ( charge < 0.0 ) charge = 0.0;
		}
		else if ( target.vel.length() > 0 )
		{
			charge -= 0.002*target.vel.length();
			if ( charge < 0.0 ) charge = 0.0;
		}
		else
		{
			charge += 0.015;
			if ( charge > 1.0 ) charge = 1.0;
		}
	}
}
